#include "lr35902_tests.h"
#include "../src/z80family/lr35902.h"
#include <iostream>
#include <fstream>


tests::lr35902_tests::lr35902_tests() :
	cpu_tests() {
	cpu = Cpu::create("lr35902");
	cpu->read([this](const uint16_t p) { return read(p); });
	cpu->write([this](const uint16_t p, const uint8_t v) { write(p, v); return true; });
	//	cpu->in([this](const uint8_t v) { return read(0xff00 + v); });
	//	cpu->out([this](const uint8_t p, const uint8_t v) { out(p, v); });
	selectedROMbanks = 1;
}

const uint8_t tests::lr35902_tests::read(const uint16_t address) {
	if (address < 0x8000) {
		if (address < 0x4000)
			return memory[address];
		return memory[selectedROMbanks * 0x4000 + (address - 0x4000)];
	}
	return memory2[address - 0x8000];
}
void tests::lr35902_tests::write(const uint16_t address, const uint8_t value) {
	if (address < 0x8000) {
		if ((address >= 0x2000) && (address < 0x4000)) {
			selectedROMbanks = value & 0x1f;
			if (value == 0)
				selectedROMbanks++;
		}
		return;
	}
	if (address >= 0xff00) {
		out(address & 0xff, value);
	}
	else {
		memory2[address - 0x8000] = value;
	}
}
void tests::lr35902_tests::out(const uint8_t p, const uint8_t v) {
	switch (p) {
	case 1:
		c = v;
		break;
	case 2:
		if (v == 0x81)
			std::cout << (char)c;
		break;
	}
	memory2[0xff00 + p - 0x8000] = v;
}
void tests::lr35902_tests::timer(const uint64_t cycles) {
	static const uint16_t frequency[4] = { 1024,16,64,256 };
	const uint8_t tac = memory2[0xff07 - 0x8000];
	if (tac & 0x04) {
		if (previous_cycles == 0)
			previous_cycles = cycles;
		const uint64_t delta = (cycles - previous_cycles) / frequency[tac & 0x03];
		if (delta > 0) {
			uint16_t tima = memory2[0xff05 - 0x8000] + delta;
			if (tima > 0xff) {
				tima = memory2[0xff06 - 0x8000];
				memory2[0xff0f - 0x8000] |= 0x04;
			}
			memory2[0xff05 - 0x8000] = tima & 0xff;
			previous_cycles = cycles;
		}
	}
	else {
		previous_cycles = 0;
	}
}

const std::vector<std::pair<uint64_t, uint64_t>> opcodes = {
	{ 0x00000000, 4 }, { 0x01000000, 12 }, { 0x02000000, 8 }, { 0x03000000, 8 }, { 0x04000000, 4 }, { 0x05000000, 4 }, { 0x06000000, 8 }, { 0x07000000, 4 },
	{ 0x08000000, 20 }, { 0x09000000, 8 }, { 0x0a000000, 8 }, { 0x0b000000, 8 }, { 0x0c000000, 4 }, { 0x0d000000, 4 }, { 0x0e000000, 8 }, { 0x0f000000, 4 },
	{ 0x10000000, 4 }, { 0x11000000, 12 }, { 0x12000000, 8 }, { 0x13000000, 8 }, { 0x14000000, 4 }, { 0x15000000, 4 }, { 0x16000000, 8 }, { 0x17000000, 4 },
	{ 0x18000000, 12 }, { 0x19000000, 8 }, { 0x1a000000, 8 }, { 0x1b000000, 8 }, { 0x1c000000, 4 }, { 0x1d000000, 4 }, { 0x1e000000, 8 }, { 0x1f000000, 4 },
	{ 0x20000000, 8 }, { 0x21000000, 12 }, { 0x22000000, 8 }, { 0x23000000, 8 }, { 0x24000000, 4 }, { 0x25000000, 4 }, { 0x26000000, 8 }, { 0x27000000, 4 },
	{ 0x28000000, 12 }, { 0x29000000, 8 }, { 0x2a000000, 8 }, { 0x2b000000, 8 }, { 0x2c000000, 4 }, { 0x2d000000, 4 }, { 0x2e000000, 8 }, { 0x2f000000, 4 },
	{ 0x30000000, 8 }, { 0x31000000, 12 }, { 0x32000000, 8 }, { 0x33000000, 8 }, { 0x34000000, 12 }, { 0x35000000, 12 }, { 0x36000000, 12 }, { 0x37000000, 4 },
	{ 0x38000000, 12}, { 0x39000000, 8 }, { 0x3a000000, 8 }, { 0x3b000000, 8 }, { 0x3c000000, 4 }, { 0x3d000000, 4 }, { 0x3e000000, 8 }, { 0x3f000000, 4 },
	{ 0x40000000, 4 }, { 0x41000000, 4 }, { 0x42000000, 4 }, { 0x43000000, 4 }, { 0x44000000, 4 }, { 0x45000000, 4 }, { 0x46000000, 8 }, { 0x47000000, 4 },
	{ 0x48000000, 4 }, { 0x49000000, 4 }, { 0x4a000000, 4 }, { 0x4b000000, 4 }, { 0x4c000000, 4 }, { 0x4d000000, 4 }, { 0x4e000000, 8 }, { 0x4f000000, 4 },
	{ 0x50000000, 4 }, { 0x51000000, 4 }, { 0x52000000, 4 }, { 0x53000000, 4 }, { 0x54000000, 4 }, { 0x55000000, 4 }, { 0x56000000, 8 }, { 0x57000000, 4 },
	{ 0x58000000, 4 }, { 0x59000000, 4 }, { 0x5a000000, 4 }, { 0x5b000000, 4 }, { 0x5c000000, 4 }, { 0x5d000000, 4 }, { 0x5e000000, 8 }, { 0x5f000000, 4 },
	{ 0x60000000, 4 }, { 0x61000000, 4 }, { 0x62000000, 4 }, { 0x63000000, 4 }, { 0x64000000, 4 }, { 0x65000000, 4 }, { 0x66000000, 8 }, { 0x67000000, 4 },
	{ 0x68000000, 4 }, { 0x69000000, 4 }, { 0x6a000000, 4 }, { 0x6b000000, 4 }, { 0x6c000000, 4 }, { 0x6d000000, 4 }, { 0x6e000000, 8 }, { 0x6f000000, 4 },
	{ 0x70000000, 8 }, { 0x71000000, 8 }, { 0x72000000, 8 }, { 0x73000000, 8 }, { 0x74000000, 8 }, { 0x75000000, 8 }, { 0x76000000, 4 }, { 0x77000000, 8 },
	{ 0x78000000, 4 }, { 0x79000000, 4 }, { 0x7a000000, 4 }, { 0x7b000000, 4 }, { 0x7c000000, 4 }, { 0x7d000000, 4 }, { 0x7e000000, 8 }, { 0x7f000000, 4 },
	{ 0x80000000, 4 }, { 0x81000000, 4 }, { 0x82000000, 4 }, { 0x83000000, 4 }, { 0x84000000, 4 }, { 0x85000000, 4 }, { 0x86000000, 8 }, { 0x87000000, 4 },
	{ 0x88000000, 4 }, { 0x89000000, 4 }, { 0x8a000000, 4 }, { 0x8b000000, 4 }, { 0x8c000000, 4 }, { 0x8d000000, 4 }, { 0x8e000000, 8 }, { 0x8f000000, 4 },
	{ 0x90000000, 4 }, { 0x91000000, 4 }, { 0x92000000, 4 }, { 0x93000000, 4 }, { 0x94000000, 4 }, { 0x95000000, 4 }, { 0x96000000, 8 }, { 0x97000000, 4 },
	{ 0x98000000, 4 }, { 0x99000000, 4 }, { 0x9a000000, 4 }, { 0x9b000000, 4 }, { 0x9c000000, 4 }, { 0x9d000000, 4 }, { 0x9e000000, 8 }, { 0x9f000000, 4 },
	{ 0xa0000000, 4 }, { 0xa1000000, 4 }, { 0xa2000000, 4 }, { 0xa3000000, 4 }, { 0xa4000000, 4 }, { 0xa5000000, 4 }, { 0xa6000000, 8 }, { 0xa7000000, 4 },
	{ 0xa8000000, 4 }, { 0xa9000000, 4 }, { 0xaa000000, 4 }, { 0xab000000, 4 }, { 0xac000000, 4 }, { 0xad000000, 4 }, { 0xae000000, 8 }, { 0xaf000000, 4 },
	{ 0xb0000000, 4 }, { 0xb1000000, 4 }, { 0xb2000000, 4 }, { 0xb3000000, 4 }, { 0xb4000000, 4 }, { 0xb5000000, 4 }, { 0xb6000000, 8 }, { 0xb7000000, 4 },
	{ 0xb8000000, 4 }, { 0xb9000000, 4 }, { 0xba000000, 4 }, { 0xbb000000, 4 }, { 0xbc000000, 4 }, { 0xbd000000, 4 }, { 0xbe000000, 8 }, { 0xbf000000, 4 },
	{ 0xc0000000, 8 }, { 0xc1000000, 12 }, { 0xc2000000, 12 }, { 0xc3000000, 16 }, { 0xc4000000, 12 }, { 0xc5000000, 16 }, { 0xc6000000, 8 }, { 0xc7000000, 16},
	{ 0xc8000000, 20 }, { 0xc9000000, 16 }, { 0xca000000, 16 }, { 0xcc000000, 24 }, { 0xcd000000, 24 }, { 0xce000000, 8 }, { 0xcf000000, 16 },
	{ 0xd0000000, 8 }, { 0xd1000000, 12 }, { 0xd2000000, 12 }, { 0xd4000000, 12 }, { 0xd5000000, 16 }, { 0xd6000000, 8 }, { 0xd7000000, 16 },
	{ 0xd8000000, 20 }, { 0xd9000000, 16 }, { 0xda000000, 16 }, { 0xdc000000, 24 }, {0xde000000, 8}, { 0xdf000000, 16 },
	{ 0xe0000000, 12 }, { 0xe1000000, 12 }, { 0xe2000000, 8 }, { 0xe5000000, 16 }, { 0xe6000000, 8 }, { 0xe7000000, 16 },
	{ 0xe8000000, 16 }, { 0xe9000000, 4 }, { 0xea000000, 16 }, {0xee000000, 8 }, { 0xef000000, 16 },
	{ 0xf0000000, 12 }, { 0xf1000000, 12 }, { 0xf2000000, 8 }, { 0xf3000000, 4 }, { 0xf5000000, 16 }, { 0xf6000000, 8 }, { 0xf7000000, 16 },
	{ 0xf8000000, 12 }, { 0xf9000000, 8 }, { 0xfa000000, 16 }, { 0xfb000000, 4 }, {0xfe000000, 8}, { 0xdf000000, 16 },
	{ 0xcb000000, 8 }, { 0xcb010000, 8 }, { 0xcb020000, 8 }, { 0xcb030000, 8 }, { 0xcb040000, 8 }, { 0xcb050000, 8 }, { 0xcb060000, 16 }, { 0xcb070000, 8 },
	{ 0xcb080000, 8 }, { 0xcb090000, 8 }, { 0xcb0a0000, 8 }, { 0xcb0b0000, 8 }, { 0xcb0c0000, 8 }, { 0xcb0d0000, 8 }, { 0xcb0e0000, 16 }, { 0xcb0f0000, 8 },
	{ 0xcb100000, 8 }, { 0xcb110000, 8 }, { 0xcb120000, 8 }, { 0xcb130000, 8 }, { 0xcb140000, 8 }, { 0xcb150000, 8 }, { 0xcb160000, 16 }, { 0xcb170000, 8 },
	{ 0xcb180000, 8 }, { 0xcb190000, 8 }, { 0xcb1a0000, 8 }, { 0xcb1b0000, 8 }, { 0xcb1c0000, 8 }, { 0xcb1d0000, 8 }, { 0xcb1e0000, 16 }, { 0xcb1f0000, 8 },
	{ 0xcb200000, 8 }, { 0xcb210000, 8 }, { 0xcb220000, 8 }, { 0xcb230000, 8 }, { 0xcb240000, 8 }, { 0xcb250000, 8 }, { 0xcb260000, 16 }, { 0xcb270000, 8 },
	{ 0xcb280000, 8 }, { 0xcb290000, 8 }, { 0xcb2a0000, 8 }, { 0xcb2b0000, 8 }, { 0xcb2c0000, 8 }, { 0xcb2d0000, 8 }, { 0xcb2e0000, 16 }, { 0xcb2f0000, 8 },
	{ 0xcb300000, 8 }, { 0xcb310000, 8 }, { 0xcb320000, 8 }, { 0xcb330000, 8 }, { 0xcb340000, 8 }, { 0xcb350000, 8 }, { 0xcb360000, 16 }, { 0xcb370000, 8 },
	{ 0xcb380000, 8 }, { 0xcb390000, 8 }, { 0xcb3a0000, 8 }, { 0xcb3b0000, 8 }, { 0xcb3c0000, 8 }, { 0xcb3d0000, 8 }, { 0xcb3e0000, 16 }, { 0xcb3f0000, 8 },
	{ 0xcb400000, 8 }, { 0xcb410000, 8 }, { 0xcb420000, 8 }, { 0xcb430000, 8 }, { 0xcb440000, 8 }, { 0xcb450000, 8 }, { 0xcb460000, 12 }, { 0xcb470000, 8 },
	{ 0xcb480000, 8 }, { 0xcb490000, 8 }, { 0xcb4a0000, 8 }, { 0xcb4b0000, 8 }, { 0xcb4c0000, 8 }, { 0xcb4d0000, 8 }, { 0xcb4e0000, 12 }, { 0xcb4f0000, 8 },
	{ 0xcb500000, 8 }, { 0xcb510000, 8 }, { 0xcb520000, 8 }, { 0xcb530000, 8 }, { 0xcb540000, 8 }, { 0xcb550000, 8 }, { 0xcb560000, 12 }, { 0xcb570000, 8 },
	{ 0xcb580000, 8 }, { 0xcb590000, 8 }, { 0xcb5a0000, 8 }, { 0xcb5b0000, 8 }, { 0xcb5c0000, 8 }, { 0xcb5d0000, 8 }, { 0xcb5e0000, 12 }, { 0xcb5f0000, 8 },
	{ 0xcb600000, 8 }, { 0xcb610000, 8 }, { 0xcb620000, 8 }, { 0xcb630000, 8 }, { 0xcb640000, 8 }, { 0xcb650000, 8 }, { 0xcb660000, 12 }, { 0xcb670000, 8 },
	{ 0xcb680000, 8 }, { 0xcb690000, 8 }, { 0xcb6a0000, 8 }, { 0xcb6b0000, 8 }, { 0xcb6c0000, 8 }, { 0xcb6d0000, 8 }, { 0xcb6e0000, 12 }, { 0xcb6f0000, 8 },
	{ 0xcb700000, 8 }, { 0xcb710000, 8 }, { 0xcb720000, 8 }, { 0xcb730000, 8 }, { 0xcb740000, 8 }, { 0xcb750000, 8 }, { 0xcb760000, 12 }, { 0xcb770000, 8 },
	{ 0xcb780000, 8 }, { 0xcb790000, 8 }, { 0xcb7a0000, 8 }, { 0xcb7b0000, 8 }, { 0xcb7c0000, 8 }, { 0xcb7d0000, 8 }, { 0xcb7e0000, 12 }, { 0xcb7f0000, 8 },
	{ 0xcb800000, 8 }, { 0xcb810000, 8 }, { 0xcb820000, 8 }, { 0xcb830000, 8 }, { 0xcb840000, 8 }, { 0xcb850000, 8 }, { 0xcb860000, 16 }, { 0xcb870000, 8 },
	{ 0xcb880000, 8 }, { 0xcb890000, 8 }, { 0xcb8a0000, 8 }, { 0xcb8b0000, 8 }, { 0xcb8c0000, 8 }, { 0xcb8d0000, 8 }, { 0xcb8e0000, 16 }, { 0xcb8f0000, 8 },
	{ 0xcb900000, 8 }, { 0xcb910000, 8 }, { 0xcb920000, 8 }, { 0xcb930000, 8 }, { 0xcb940000, 8 }, { 0xcb950000, 8 }, { 0xcb960000, 16 }, { 0xcb970000, 8 },
	{ 0xcb980000, 8 }, { 0xcb990000, 8 }, { 0xcb9a0000, 8 }, { 0xcb9b0000, 8 }, { 0xcb9c0000, 8 }, { 0xcb9d0000, 8 }, { 0xcb9e0000, 16 }, { 0xcb9f0000, 8 },
	{ 0xcba00000, 8 }, { 0xcba10000, 8 }, { 0xcba20000, 8 }, { 0xcba30000, 8 }, { 0xcba40000, 8 }, { 0xcba50000, 8 }, { 0xcba60000, 16 }, { 0xcba70000, 8 },
	{ 0xcba80000, 8 }, { 0xcba90000, 8 }, { 0xcbaa0000, 8 }, { 0xcbab0000, 8 }, { 0xcbac0000, 8 }, { 0xcbad0000, 8 }, { 0xcbae0000, 16 }, { 0xcbaf0000, 8 },
	{ 0xcbb00000, 8 }, { 0xcbb10000, 8 }, { 0xcbb20000, 8 }, { 0xcbb30000, 8 }, { 0xcbb40000, 8 }, { 0xcbb50000, 8 }, { 0xcbb60000, 16 }, { 0xcbb70000, 8 },
	{ 0xcbb80000, 8 }, { 0xcbb90000, 8 }, { 0xcbba0000, 8 }, { 0xcbbb0000, 8 }, { 0xcbbc0000, 8 }, { 0xcbbd0000, 8 }, { 0xcbbe0000, 16 }, { 0xcbbf0000, 8 },
	{ 0xcbc00000, 8 }, { 0xcbc10000, 8 }, { 0xcbc20000, 8 }, { 0xcbc30000, 8 }, { 0xcbc40000, 8 }, { 0xcbc50000, 8 }, { 0xcbc60000, 16 }, { 0xcbc70000, 8 },
	{ 0xcbc80000, 8 }, { 0xcbc90000, 8 }, { 0xcbca0000, 8 }, { 0xcbcb0000, 8 }, { 0xcbcc0000, 8 }, { 0xcbcd0000, 8 }, { 0xcbce0000, 16 }, { 0xcbcf0000, 8 },
	{ 0xcbd00000, 8 }, { 0xcbd10000, 8 }, { 0xcbd20000, 8 }, { 0xcbd30000, 8 }, { 0xcbd40000, 8 }, { 0xcbd50000, 8 }, { 0xcbd60000, 16 }, { 0xcbd70000, 8 },
	{ 0xcbd80000, 8 }, { 0xcbd90000, 8 }, { 0xcbda0000, 8 }, { 0xcbdb0000, 8 }, { 0xcbdc0000, 8 }, { 0xcbdd0000, 8 }, { 0xcbde0000, 16 }, { 0xcbdf0000, 8 },
	{ 0xcbe00000, 8 }, { 0xcbe10000, 8 }, { 0xcbe20000, 8 }, { 0xcbe30000, 8 }, { 0xcbe40000, 8 }, { 0xcbe50000, 8 }, { 0xcbe60000, 16 }, { 0xcbe70000, 8 },
	{ 0xcbe80000, 8 }, { 0xcbe90000, 8 }, { 0xcbea0000, 8 }, { 0xcbeb0000, 8 }, { 0xcbec0000, 8 }, { 0xcbed0000, 8 }, { 0xcbee0000, 16 }, { 0xcbef0000, 8 },
	{ 0xcbf00000, 8 }, { 0xcbf10000, 8 }, { 0xcbf20000, 8 }, { 0xcbf30000, 8 }, { 0xcbf40000, 8 }, { 0xcbf50000, 8 }, { 0xcbf60000, 16 }, { 0xcbf70000, 8 },
	{ 0xcbf80000, 8 }, { 0xcbf90000, 8 }, { 0xcbfa0000, 8 }, { 0xcbfb0000, 8 }, { 0xcbfc0000, 8 }, { 0xcbfd0000, 8 }, { 0xcbfe0000, 16 }, { 0xcbff0000, 8 },
};

bool tests::lr35902_tests::runTest(const string& filename, const uint64_t cycles_expected) {
	load(0x0, filename);

	auto cpuc = static_cast<LR35902*>(cpu);
	cpu->reset(0x100);

	finished = false;

	while (!finished) {
		cpu->executeOne();
		timer(cpu->elapsed_cycles());
		if ((read(cpuc->pc()) == 0x18) && (read(cpuc->pc() + 1) == 0xfe))
			finished = true;
		if ((cpuc->pc() == 0x06f1) && (read(cpuc->pc()) == 0xc3))
			finished = true;
	}
	if (cycles_expected > 0)
		std::cout << std::endl << "Expected cycles : " << cycles_expected << " - Cycles : " << cpu->elapsed_cycles();
	return true;
}

bool tests::lr35902_tests::run() {
	std::cout << "Check cycles" << std::endl;
	runTestCycles(opcodes);
	std::cout << std::endl;
	std::cout << "BLARGG Tests - cpu_instr" << std::endl;
	runTest("tests/data/lr35902/blargg/cpu_instrs.gb");
	std::cout << std::endl;
	return true;
}